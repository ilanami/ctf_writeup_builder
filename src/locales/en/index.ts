// src/locales/en/index.ts
export default {
  appTitle: 'CTF Write-up Builder',
  generalInfo: {
    title: 'BASIC INFORMATION',
    writeupTitle: 'Title',
    author: 'Author',
    date: 'Date',
    selectDate: 'Select a date',
    difficulty: 'Difficulty',
    selectDifficulty: 'Select difficulty',
    tags: 'Tags',
    addTag: 'Add tag...',
    os: 'Operating System',
    selectOS: 'Select O.S.',
    machineImage: 'Machine Image',
    addImage: 'Add image',
    writeupTitlePlaceholder: "E.g. 'Kioptrix Level 1 Analysis'",
    authorPlaceholder: "Your name or alias",
    defaultWriteupTitle: "New Write-up", // Key for default title
    defaultAuthor: "Anonymous", // Key for default author
  },
  header: {
    exportMD: 'Export MD',
    exportPDF: 'Export PDF',
    importJSON: 'Import JSON',
    importMD: 'Import MD',
    save: 'Save',
    preview: 'Preview',
    editor: 'Editor',
    backup: 'Backup',
    new: 'New',
    newWriteupTitle: 'Start a New Write-up?',
    newWriteupDescription: 'This will clear the current write-up and load a default template. Unsaved changes will be lost.',
    cancel: 'Cancel',
    continue: 'Continue',
    switchToEnglish: 'English',
    switchToSpanish: 'Español',
    toggleLanguage: 'Toggle Language',
    donateButton: 'Donate',
    donateButtonTooltip: 'Support the project',
    configureApiKey: 'AI API Key',
  },
  structurePanel: {
    structure: 'STRUCTURE',
    addSection: 'ADD SECTION',
    noSectionsYet: 'No sections yet.',
    templateSectionsHint: 'Click a template section to start editing it.',
    untitledSection: 'Untitled Section',
    deleteSectionTitle: 'Confirm Section Deletion',
    deleteSectionDescription: 'Are you sure you want to delete the section "{title}"? This action cannot be undone.',
    deleteSectionAriaLabel: 'Delete section {title}',
    suggestedSections: 'SUGGESTED SECTIONS',
  },
  activeSectionEditor: {
    editingSection: 'Editing Section: {title}',
    untitledSection: 'Untitled Section',
    selectSectionToEdit: 'Select a section to edit',
    orCreateNew: 'or create a new one from the sections panel.',
    sectionTitle: 'Section Title',
    answerToQuestion: 'Answer to Question',
    flagValue: 'Flag Value',
    contentMarkdown: 'Content (Markdown)',
    aiAssistant: 'AI Assistant',
    aiPromptPlaceholder: 'E.g., \'Vulnerability analysis with Nessus\'',
    generateWithAI: 'Generate with AI',
    generating: 'Generating...',
    aiSuggestion: 'AI Suggestion:',
    copySuggestion: 'Copy Suggestion',
    deleteSuggestion: 'Clear Suggestion',
    screenshots: 'Section Screenshots',
    addScreenshot: 'Add Screenshot',
    deleteScreenshot: 'Delete screenshot "{title}"',
    titleRequiredForAI: 'Title Required',
    ensureTitleForAI: 'Please ensure the section has a title before generating content with AI.',
    suggestionGenerated: 'Suggestion Generated',
    aiGeneratedSuggestionDetails: 'AI has generated a suggestion. You can copy and paste it into your section.',
    aiError: 'AI Error',
    aiErrorDetails: 'Could not generate content: {errorMessage}',
    copied: 'Copied',
    aiSuggestionCopied: 'AI suggestion copied to clipboard.',
    errorCopying: 'Error Copying',
    couldNotCopySuggestion: 'Could not copy suggestion.',
  },
  sectionTypes: {
    paso: { label: 'Step', description: 'Describe a step in the process.', example: '## Step Example\n\nDescribe the actions, tools, or commands used in this step.' },
    pregunta: { label: 'Question', description: 'Formulate a question and its answer.', example: '## Example Question\n\nWhat is the main vulnerability?\n\n**Answer:** The main vulnerability is ...' },
    flag: { label: 'Flag', description: 'Record a found flag.', example: '## Flag Example\n\nFlag found: `HTB{example_flag}`' },
    notas: { label: 'Notes', description: 'Add general notes or comments.', example: '## Notes Example\n\nAdd your observations, tips, or further research points here.' },
  },
  difficulties: {
    Fácil: 'Easy',
    Medio: 'Medium',
    Difícil: 'Hard',
    Insano: 'Insane',
    Personalizado: 'Custom',
  },
  operatingSystems: {
    Linux: 'Linux',
    Windows: 'Windows',
    macOS: 'macOS',
    Android: 'Android',
    iOS: 'iOS',
    Otro: 'Other',
  },
  toasts: {
    info: "Info",
    success: "Success",
    error: "Error",
    unknownError: "Unknown error",
    noContentToExportMD: "No active content to export to Markdown.",
    markdownExported: "Write-up exported to Markdown.",
    couldNotExportMD: "Could not export Markdown file.",
    jsonImportError: "JSON Import Error",
    jsonImportErrorDetails: "Error importing JSON: {errorMessage}",
    jsonSectionsImported: "Sections from JSON file imported and added successfully.",
    jsonNoSectionsToImport: "The JSON file did not contain a valid 'sections' array to import.",
    jsonNoSectionsToImportNothingToAdd: "The JSON file was valid but contained no sections to add or sections were empty.",
    mdImportError: "MD Import Error",
    mdImportDefaultTitle: "Imported Markdown Content",
    mdSectionImported: "Section \"{sectionTitle}\" imported and added successfully from Markdown.",
    pdfImportError: "PDF Import Error",
    pdfImportErrorPdfjs: "Could not process PDF with local parser.",
    pdfCannotReadFileForAI: "Could not read PDF file for AI processing.",
    pdfProcessingWithAI: "Processing PDF with AI...",
    pdfProcessingWithAIDescription: "This may take a few moments. Attempting to structure content.",
    pdfAIError: "PDF AI Error",
    pdfAIErrorDetails: "AI could not process the PDF: {errorMessage}",
    pdfAIErrorParsing: "AI returned a response, but it could not be parsed. Raw response: {rawResponse}",
    pdfAISectionsImported: "{count} AI-structured sections imported from PDF.",
    pdfAISectionsImportedShort: "{count} AI sections",
    pdfAINoSectionsFound: "AI processed the PDF but found no structured sections to import.",
    pdfProcessingWithPdfjs: "Processing PDF with local parser...",
    pdfProcessingWithPdfjsDescription: "Extracting text and images.",
    pdfTextSectionTitlePrefix: "Text from PDF",
    pdfImageSectionTitlePrefix: "Images from PDF",
    pdfImageSectionContent: "Extracted {imageCount} images from the PDF.",
    pdfAdditionallyImagesImported: " Additionally, {imageCount} images were imported.",
    pdfContentImported: "PDF content imported. Text and {imageCount} images added in separate sections.",
    pdfTextImported: "PDF text imported as a new section.",
    pdfTextImportedShort: "PDF text added.",
    pdfImagesImported: "{imageCount} images from PDF imported into a new section.",
    pdfImagesImportedShort: "{imageCount} PDF images added.",
    pdfImportCompleted: "PDF import completed.",
    pdfImportCompletedNoNewContent: "PDF import completed, but no new content was added.",
    pdfNoContentFromPdfjs: "Local PDF parser found no text or image content.",
    pdfAINoContentAndPdfjsNoContent: "Neither AI nor the local PDF parser could extract content.",
    jsonBackupExported: "JSON backup exported successfully.",
    couldNotExportJsonBackup: "Could not export JSON backup.",
    newWriteupCreated: "New write-up created.",
    progressSaved: "Progress Saved",
    progressSavedDetails: "Your write-up has been saved in the browser.",
    errorSavingProgress: "Error Saving",
    couldNotSaveProgress: "Could not save progress.",
    gistNotImplemented: "Gist export is not yet implemented.",
  },
   pdfModal: {
    title: "PDF Exporter for CTF Write-ups",
    close: "Close",
    theme: "Theme",
    Hacker: "Hacker",
    'Professional-Light': "Professional (Light)",
    'Professional-Dark': "Professional (Dark)",
    Cyberpunk: "Cyberpunk",
    Minimal: "Minimal",
    settings: "Settings",
    includeHeader: "Include Header",
    headerText: "Header Text",
    includeFooter: "Include Footer",
    footerText: "Footer Text",
    pageNumbering: "Page Numbering",
    autoSplitSections: "Split large sections",
    pageLayout: "Page Layout",
    pageSize: "Page Size",
    orientation: "Orientation",
    orientationVertical: "Vertical",
    orientationHorizontal: "Horizontal",
    typographyAndMedia: "Typography & Media",
    fontSize: "Font Size",
    fontSizeSmall: "Small",
    fontSizeMedium: "Medium",
    fontSizeLarge: "Large",
    imageQuality: "Image Quality",
    imageQualityLow: "Low",
    imageQualityMedium: "Medium",
    imageQualityHigh: "High",
    imageQualityMax: "Maximum",
    pdfTipsTitle: "PDF Tips",
    pdfTip1: "Use fewer images per section for better display.",
    pdfTip2: "Consider splitting very long code blocks.",
    pdfTip3: "If you see blank pages, try landscape orientation.",
    previewZoom: "Preview Zoom",
    exportButton: "Export to PDF",
    exportingButton: "Exporting...",
    hidePreview: "Hide Preview",
    showPreview: "Show Preview",
    previewHiddenTitle: "Preview Hidden",
    previewHiddenDesc: "Click \"Show Preview\" to see the document.",
    errorPreparingPDF: "Preparation Error",
    couldNotFindContentToExport: "Could not find content to export.",
    processingPDF: "Processing...",
    generatingPDF: "Generating PDF. This may take a moment.",
    errorContentEmpty: "Content Error",
    contentToExportIsEmpty: "The content to export is empty.",
    exportError: "Export Error",
    couldNotLoadPDFLibrary: "Could not load PDF library.",
    pdfExportSuccess: "Success",
    pdfExportedSuccessfully: "PDF exported successfully.",
    pdfExportFailed: "Could not export PDF. {errorMessage}. Check browser console for details.",
    untitledWriteup: "Untitled Write-up",
    authorLabel: "Author",
    dateLabel: "Date",
    difficultyLabel: "Difficulty",
    osLabel: "O.S.",
    tagsLabel: "Tags",
    machineImageLabel: "Machine Image",
    machineImageAlt: "Machine image",
    untitledSection: "Untitled Section",
    answerLabel: "Answer",
    flagLabel: "Flag",
    screenshotsLabel: "Screenshots",
    noContent: "No content.",
    errorProcessingMarkdown: "Error processing Markdown.",
    errorInvalidContentType: "Error: invalid content type for this section.",
    defaultPageFooter: "Page %p of %P",
    anonymousAuthor: "Anonymous Author",
    sectionTypePaso: "Step",
    sectionTypePregunta: "Question",
    sectionTypeFlag: "Flag",
    sectionTypeNotas: "Notes",
    futureFeatureTooltip: "Future feature",
  },
  defaultSections: {
    initialReconnaissance: "Initial Reconnaissance",
    webEnumeration: "Web Enumeration",
    exploitation: "Exploitation",
    privilegeEscalation: "Privilege Escalation",
    userFlag: "User Flag",
    rootFlag: "Root Flag",
    mainVulnerability: "Main Vulnerability",
    lessonsLearned: "Lessons Learned / Notes",
  },
  defaultSectionsContent: {
    initialReconnaissanceContent: "# Initial Reconnaissance\n\n## Port Scanning\nWe start with a full nmap scan to identify exposed services:\n# Quick initial scan\nnmap -sS -O -sV -sC -p- --min-rate=1000 -oN initial_scan.txt <TARGET_IP>\n\n# Detailed scan of open ports\nnmap -sV -sC -A -p <OPEN_PORTS> -oN detailed_scan.txt <TARGET_IP>\n\n# UDP scan (top ports)\nsudo nmap -sU --top-ports 1000 -oN udp_scan.txt <TARGET_IP>\n\n## Service Enumeration\n| Port | Service | Version | Notes |\n|------|---------|---------|-------|\n| 22   | SSH     | OpenSSH 7.4 | Banner grabbing |\n| 80   | HTTP    | Apache 2.4.6 | Web server |\n| 443  | HTTPS   | Apache 2.4.6 | SSL/TLS enabled |\n\n## Web Reconnaissance (if applicable)\n# Discover technologies\nwhatweb <TARGET_IP>\n\n# Directory enumeration\nferoxbuster -u http://<TARGET_IP> -w /usr/share/wordlists/dirb/common.txt\n\n# Alternative: Gobuster\ngobuster dir -u http://<TARGET_IP> -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\n\nTools used: nmap, feroxbuster, gobuster, whatweb, nikto",
    webEnumerationContent: "# Web Enumeration\n\n## Initial Analysis\n- Detected technology: [Apache/Nginx/IIS version]\n- CMS/Framework: [WordPress/Drupal/Custom/etc]\n- Backend language: [PHP/Python/Node.js/etc]\n\n## Directory Discovery\n# Main directories found\nferoxbuster -u http://<TARGET_IP> -w /usr/share/wordlists/dirb/common.txt -x php,html,txt,js\n\n# Subdomains (if applicable)\ngobuster vhost -u <TARGET_IP> -w /usr/share/wordlists/subdomains-top1million-5000.txt\n\n### Interesting Directories:\n- /admin - Admin panel\n- /login - Login form\n- /uploads - Uploads directory\n- /config - Config files\n\n## Vulnerability Analysis\n# Nikto scan\nnikto -h http://<TARGET_IP>\n\n# Burp Suite\n# - Set proxy to 127.0.0.1:8080\n# - Intercept and analyze requests/responses\n# - Look for vulnerable parameters\n\n## Identified Attack Vectors\n- [ ] SQL Injection in login parameters\n- [ ] XSS Stored/Reflected\n- [ ] LFI/RFI in file inclusion\n- [ ] File Upload vulnerabilities\n- [ ] CSRF in critical forms\n- [ ] Directory Traversal\n\nTools: Burp Suite, Nikto, OWASP ZAP, SQLmap, XSSer",
    exploitationContent: "# Exploitation\n\n## Main Attack Vector\nVulnerability exploited: [SQL Injection / RCE / File Upload / etc]\nSeverity: [Critical/High/Medium/Low]\nCVE: [If applicable]\n\n## Exploitation Steps\n\n### 1. Vulnerability Identification\n[Describe how the vulnerability was found]\n\n### 2. Exploit Development\n#!/usr/bin/env python3\n# Exploit for [VULNERABILITY]\nimport requests\nimport sys\n\ntarget_url = 'http://<TARGET_IP>/vulnerable_endpoint'\npayload = { 'parameter': 'malicious_payload_here' }\n\ndef exploit():\n    try:\n        response = requests.post(target_url, data=payload)\n        if 'success_indicator' in response.text:\n            print('[+] Exploit successful!')\n            print('[+] Response:', response.text)\n        else:\n            print('[-] Exploit failed')\n    except Exception as e:\n        print('[-] Error:', e)\n\nif __name__ == '__main__':\n    exploit()\n\n### 3. Exploit Execution\n# Run exploit\npython3 exploit.py\n\n# Set up reverse shell (example)\nnc -lvnp 4444  # Listener\n# Payload triggers reverse connection\n\n## Initial Access Obtained\n- User: [www-data / apache / user]\n- Shell type: [bash/sh/cmd]\n- Initial directory: [/var/www/html / /home/user]\n\n## Immediate Post-Exploitation\n# System info\nuname -a\nid\nwhoami\npwd\n\n# Interesting files\nfind / -name '*.txt' -type f 2>/dev/null | head -20\nfind / -perm -4000 -type f 2>/dev/null  # SUID binaries",
    privilegeEscalationContent: "# Privilege Escalation\n\n## System Enumeration\n# Basic system info\nuname -a\ncat /etc/os-release\nid\nsudo -l\n\n# Running processes\nps aux | grep root\nps aux --forest\n\n# Internal services and ports\nnetstat -tulpn\nss -tulpn\n\n## Automated Enumeration Tools\n# LinPEAS (recommended)\ncurl -L https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh | sh\n\n# LinEnum\n./LinEnum.sh\n\n# Linux Exploit Suggester\n./linux-exploit-suggester.sh\n\n## Analyzed Escalation Vectors\n\n### 1. SUID/SGID Binaries\nfind / -perm -4000 -type f 2>/dev/null\nfind / -perm -2000 -type f 2>/dev/null\n\n# Interesting binaries found:\n# - /usr/bin/[binary_name]\n# - Check GTFOBins for exploitation\n\n### 2. Sudo Misconfigurations\nsudo -l\n# Commands executable as root without password\n\n### 3. Cron Jobs\ncat /etc/crontab\nls -la /etc/cron.*\ncrontab -l\n\n### 4. Kernel Exploits\n# Kernel version\nuname -r\n\n# Applicable exploits:\n# - CVE-XXXX-XXXX: [Description]\n# - Available at: [Exploit URL]\n\n## Successful Escalation\nMethod used: [SUID binary / Sudo misconfiguration / Kernel exploit / etc]\n\n# Command/script used to escalate\n[command or specific script]\n\n# Root verification\nid\nwhoami\ncat /root/root.txt\n\nRoot obtained: ✅",
    userFlagContent: "# User Flag\n\n## Flag Location\nFile: /home/[username]/user.txt\nOwner user: [username]\n\n## Steps to Obtain the Flag\n# Navigate to user directory\ncd /home/[username]\n\n# Read the flag\ncat user.txt\n\n## User Flag\n[USER_FLAG_HERE]\n\n## Additional Notes\n- The flag was found after [initial shell / partial escalation]\n- File permissions: [ls -la user.txt]\n- Verification hash (if applicable): [md5sum user.txt]\n\n## Screenshot\n[Screenshot showing flag acquisition]",
    rootFlagContent: "# Root Flag\n\n## Flag Location\nFile: /root/root.txt\nOwner user: root\nPermissions: 600 (rw-------)\n\n## Steps to Obtain the Flag\n# Verify root access\nid\nwhoami\n\n# Access root directory\ncd /root\n\n# Read the root flag\ncat root.txt\n\n## Root Flag\n[ROOT_FLAG_HERE]\n\n## Full Compromise Verification\n# Verify full system access\ncat /etc/shadow | head -5\nls -la /root/\nhistory\n\n## Compromised System Info\n- Hostname: [hostname]\n- Kernel: [uname -r]\n- Distribution: [cat /etc/os-release]\n- Uptime: [uptime]\n\n## Screenshot\n[Screenshot showing root flag acquisition]\n\n---\n🎉 System fully compromised - Root obtained",
    mainVulnerabilityContent: "# Main Vulnerability\n\n## Question\nWhat was the main vulnerability exploited to gain initial access to the system?\n\n## Answer\nVulnerability: [Specific vulnerability name]\n\n### Technical Details\n- Type: [SQL Injection / RCE / File Upload / Buffer Overflow / etc]\n- Affected component: [Web app / Service / etc]\n- Vulnerable version: [Specific software version]\n- CVE (if applicable): CVE-XXXX-XXXX\n- CVSS Score: [Score if available]\n\n### Vulnerability Description\n[Detailed explanation of what the vulnerability does and why it is exploitable]\n\n### Impact\n- Confidentiality: [High/Medium/Low]\n- Integrity: [High/Medium/Low]\n- Availability: [High/Medium/Low]\n\n### Attack Vector\n1. [Step 1 of the attack]\n2. [Step 2 of the attack]\n3. [Step 3 of the attack]\n\n### Recommended Mitigation\n- [Mitigation step 1]\n- [Mitigation step 2]\n- [Mitigation step 3]\n\n### References\n- [CVE URL if applicable]\n- [Public exploit URL if used]\n- [Additional documentation]",
    lessonsLearnedContent: "# Lessons Learned\n\n## CTF Reflections\n\n### 🎯 Key Points\n- [Lesson 1]: [Description of what was learned]\n- [Lesson 2]: [Description of what was learned]\n- [Lesson 3]: [Description of what was learned]\n\n### 💡 Important Techniques\n- Enumeration: [What worked well in recon phase]\n- Exploitation: [Key technique or tool]\n- Escalation: [Method that led to root]\n\n### 🔧 Highlighted Tools\n| Tool | Use | Effectiveness |\n|------|-----|--------------|\n| [Tool 1] | [Purpose] | ⭐⭐⭐⭐⭐ |\n| [Tool 2] | [Purpose] | ⭐⭐⭐⭐ |\n| [Tool 3] | [Purpose] | ⭐⭐⭐ |\n\n### ⚠️ Mistakes Made\n- [Mistake 1]: [What went wrong and how to avoid it]\n- [Mistake 2]: [What went wrong and how to avoid it]\n\n### 📚 New Knowledge\n- [New concept learned 1]\n- [New concept learned 2]\n- [New command/technique discovered]\n\n### 🚀 For Future CTFs\n- [ ] Remember to check [specific file/directory]\n- [ ] Always try [specific technique] in [context]\n- [ ] Never forget to enumerate [specific service/port]\n- [ ] Research more about [technology/concept]\n\n### 📖 Useful Resources\n- [Useful documentation URL]\n- [Helpful blog post]\n- [Effective tool or wordlist]\n\n### 🏆 Perceived Difficulty\nPersonal rating: [1-10]/10\n\nTotal time: [X hours]\n\nMost challenging aspects:\n1. [Challenge 1]\n2. [Challenge 2]\n\n---\nAdditional notes:\n[Any final observation or important reminder]"
  },
  imageUploader: {
    selectFileButton: "Select file",
    fileTooLarge: "File is too large. Maximum {maxSize}MB.",
    invalidFileType: "Invalid file type. Please upload an image.",
    errorReadingFile: "Error reading file.",
    previewAlt: "Preview",
    deleteImageAlt: "Delete image",
    defaultLabel: "Upload Image",
    dragDropOrClick: "Drag and drop or click to select",
    maxFileSize: "(Max. {maxSize}MB)",
  },
  tagInput: {
    addButton: "Add",
    removeTagButtonLabel: "Remove tag",
  },
  donations: {
    title: "Support the Project",
    message: "Hello 👋,\n\nIf you liked this tool and found it useful, consider buying me a coffee or making a donation as a thank you.\n\nIt's not mandatory, but it would help me a lot to continue creating tools like this and to pay for the cybersecurity certifications I want to obtain.\n\nThank you very much for your support!",
    paypalLinkPlaceholder: "Your PayPal Link Here",
    closeButton: "Close",
    donateButtonAction: "Donate with PayPal",
  },
  writeupPreview: {
    tableOfContents: "Table of Contents",
  },
  aiConfig: {
    configureApiKeyButton: "Configure AI API Key",
    configureApiKeyTitleGemini: "Configure Google AI API Key",
    configureApiKeyTitleOpenAI: "Configure OpenAI API Key",
    configureApiKeyDescriptionGemini: "To use AI features, you need to provide your own Google AI (Gemini) API Key.\nThis key will be stored securely in your browser's local storage and will not be sent to any external server except Google for processing your AI requests.",
    configureApiKeyDescriptionOpenAI: "To use AI features, you need to provide your own OpenAI API Key.\nThis key will be stored securely in your browser's local storage and will not be sent to any external server except OpenAI for processing your AI requests.",
    responsibilityNote: "You are responsible for the usage and any potential costs associated with your key.",
    providerLabel: "Provider:",
    providerGemini: "Google Gemini",
    providerOpenAI: "OpenAI ChatGPT",
    apiKeyLabelGemini: "Your Google AI API Key:",
    apiKeyLabelOpenAI: "Your OpenAI API Key:",
    apiKeyPlaceholder: "Paste your API key here",
    helpLinkText: "How to get your API Key?",
    securityNote: "🔒 Your API Key is stored locally and Base64 encoded (NOT secure encryption). We never share your credentials.",
    cancelButton: "Cancel",
    saveKeyButton: "Save Key",
    deleteApiKeyButton: "Delete API Key",
    errorApiKeyEmpty: "Please enter a valid API Key.",
    errorOpenAIPrefix: "OpenAI API Keys start with 'sk-'.",
    errorApiKeyTooShort: "The API Key seems too short.",
    apiKeySavedTitle: "API Key Saved",
    apiKeySavedDescription: "Your API key has been saved locally.",
    apiKeyDeletedTitle: "API Key Deleted",
    apiKeyDeletedDescription: "Your API key has been removed from local storage.",
    apiKeyEmptyTitle: "API Key Empty",
    apiKeyEmptyDescription: "Please enter a valid API key.",
    apiKeyMissingTitle: "API Key Required",
    apiKeyMissingDescription: "Please configure your AI API Key to use this feature.",
    apiKeyMissingDescriptionForPdf: "Please configure your AI API Key to attempt AI-assisted PDF processing.",
    currentKey: "Current key",
  },
  about: {
    title: "About CTF Write-up Builder",
    version: "Version",
    description: "CTF Write-up Builder is a modern, privacy-friendly app to create, organize, and export CTF write-ups with AI assistance. It supports Markdown, screenshots, PDF/MD/JSON export, and more.",
    featuresTitle: "Main Features",
    features: [
      "Create and edit CTF write-ups with Markdown support",
      "Organize sections: steps, questions, flags, notes, etc.",
      "Add and manage screenshots per section",
      "AI-powered content generation (Google Gemini & OpenAI)",
      "Export to Markdown, PDF, JSON backup",
      "Import from Markdown or JSON",
      "Multi-language: English & Spanish",
      "All data stays in your browser (privacy by design)",
      "Customizable PDF export themes",
      "Backup/restore write-ups easily"
    ],
    author: "Author",
    authorName: "Ilana Aminof (ilanami)",
    contact: "Contact",
    contactEmail: "writeup_builder@proton.me",
    github: "GitHub Repository",
    githubUrl: "https://github.com/ilanami/ctf_writeup_builder",
    acknowledgements: "Acknowledgements",
    thanks: "Thanks to all CTF players, open source contributors, and the cybersecurity community.",
    closeButton: "Close",
  },
  help: {
    title: "Help & FAQ",
    intro: "Find answers to common questions and tips for using CTF Write-up Builder.",
    faq: [
      { q: "How is my data stored?", a: "All your write-ups and API keys are stored locally in your browser. Nothing is sent to any server except for AI requests (directly to Google or OpenAI)." },
      { q: "How do I use AI features?", a: "Configure your own API key for Google Gemini or OpenAI in the settings. Then use the AI Assistant in each section to generate content." },
      { q: "Can I export my write-up?", a: "Yes! You can export to Markdown, PDF, or JSON backup at any time from the top menu." },
      { q: "How do I add screenshots?", a: "Use the 'Add Screenshot' button in each section. Images are stored locally and included in PDF exports." },
      { q: "Is my data private?", a: "Yes. All data stays in your browser. No accounts, no tracking, no cloud storage." },
      { q: "Where can I report bugs or suggest features?", a: "Open an issue or pull request on the GitHub repository." }
    ],
    closeButton: "Close",
    categories: {
      all: 'All',
      ai: 'AI & APIs',
      export: 'Export',
      privacy: 'Privacy',
      support: 'Support',
      label: 'CATEGORIES',
    },
    quickActions: {
      label: 'QUICK ACCESS',
      reportBug: 'Report Bug',
      contact: 'Direct Contact',
      docs: 'Documentation',
    },
    infoTitle: 'INFORMATION',
    noQuestions: 'No questions in this category',
    contactTitle: "Can't find your answer? 🤔",
    contactDesc: 'Contact directly for personalized support',
    expandAll: 'Expand All',
    communityHelp: 'CTF Community Help',
  },
} as const;

